
import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import * as serviceWorker from './serviceWorker';
import PropTypes from 'prop-types';
import axios from 'axios';


const ConterContext = React.createContext({});

const initialState = {
    name: '',
    counter: 0
}

const reducer = (state, action) => {
    if(state === undefined){
        return initialState;
    }
    if(action.type === 'INCREMENT'){
        return {
            ...state,
            counter: state.counter + 1
        }
    } else if(action.type === 'DECREMENT'){
        return {
            ...state,
            counter: state.counter - 1
        }
    } else {
        return state;
    }
}

const createStore = (reducer) => {
    let state = reducer(undefined, {});
    const callbacks = [];
    const getState =  () => state;
    const subscribe = cb => {
        callbacks.push(cb);
    };
    const dispatch = (action) => {
       state = reducer(state, action);
       callbacks.forEach(cb => cb());
    };
    return {
        subscribe,
        dispatch,
        getState
    }
}

const store = createStore(reducer);

class Child extends Component{

    render(){
        return(
            <div 
                style={{
                    margin: '50px',
                    height: '100%',
                    width: '100%',
                    background: 'blue'
                }}>
                <h1>Hello world Child Component</h1>
                <GrandChild />
            </div>
        );
    }
}

class GrandChild extends Component{

    componentDidMount() {
        store.subscribe(() => this.forceUpdate());
    }

    render(){
        const { counter } = store.getState();
        return(
            <div 
                style={{
                    margin: '50px',
                    height: '100%',
                    width: '100%',
                    background: 'lightgreen'
                }}>
                <h1>Hello world Grand Child Component</h1>
                <h1>Counter: {counter}</h1>
                <button onClick={() => store.dispatch({ type: 'INCREMENT'})}>Increment</button>
            </div>
        );
    }
}

class App extends Component {

    constructor(props) {
        super(props);
    }
/* 
    componentDidMount() {
        store.subscribe(() => this.forceUpdate());
    } */

    render() {
        return(
            <ConterContext.Consumer>
                { ({store}) => (
                    <div 
                        style={{
                            height: 500,
                            width: '100%',
                            background: 'lightblue'
                        }}>
                        <h1>Hello world Parent Component</h1>
                        <button onClick={() => store.dispatch({ type: 'DECREMENT'})}>Decrement</button>
                        <Child />
                    </div>
                )
                }
            </ConterContext.Consumer>
        )
    }
}




ReactDOM.render(
    <ConterContext.Provider value={{
        store: store
    }}>
        <App/>
    </ConterContext.Provider>
    , document.getElementById('root'));

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://bit.ly/CRA-PWA
serviceWorker.unregister();

